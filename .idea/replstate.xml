<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1450845139972">{:repl-history {:ide [], :local [&quot;:function&quot; &quot;(deftest find-task-by-key-test\n         (testing \&quot;that we can find a taks by a certain key\&quot;\n                  (find-task-by-key [{:onyx/name :foo\n                                      :onyx/type :function}\n                                     {:onyx/name :bar\n                                      :onyx/type :plugin}\n                                     {:onyx/name :baz\n                                      :onyx/type :function}]\n                                    :onyx/type :function)))&quot; &quot;deftest&quot; &quot;(ns lib-onyx.job.utils-test\n  (:require [lib-onyx.job.utils :refer :all]\n            [clojure.test :refer [is deftest]]))&quot; &quot;(ns lib-onyx.job.utils-test\n  (:require [lib-onyx.job.utils :refer :all]\n            [clojure.test :refer [is deftest testing]]))&quot; &quot;find-task-by-key-test&quot; &quot;(find-task-by-key-test)&quot; &quot;(find-task-by-key [{:onyx/name :foobar\n                    :onyx/type :function}\n                   {:onyx/name :foobar\n                    :onyx/type :plugin}]\n                  :onyx/name :foobar)&quot; &quot;(find-task-by-key catalog :onyx/name task-name)&quot; &quot;catalog&quot; &quot;(deftest add-to-job-test\n  (let [sample-job {:catalog [{:onyx/name       :in\n                               :onyx/plugin     :onyx.plugin.core-async/input\n                               :onyx/type       :input}\n                              {:onyx/name       :inc\n                               :onyx/fn         :flat-workflow.core/my-inc}\n                              {:onyx/name       :out\n                               :onyx/plugin     :onyx.plugin.core-async/output}]\n                    :lifecycles [{:lifecycle/task :in\n                                  :lifecycle/calls :flat-workflow.core/in-calls}\n                                 {:lifecycle/task :in\n                                  :lifecycle/calls :onyx.plugin.core-async/reader-calls}\n                                 {:lifecycle/task :out\n                                  :lifecycle/calls :flat-workflow.core/out-calls}\n                                 {:lifecycle/task :out\n                                  :lifecycle/calls :onyx.plugin.core-async/writer-calls}]}]\n    (testing \&quot;that adding a new catalog entry increases the count\&quot;\n      (= (count (:catalog (add-to-job sample-job {:catalog {:onyx/name   :newtask\n                                                            :onyx/plugin :foo}})))\n         (inc (:catalog sample-job))))))&quot; &quot;count&quot; &quot;(deftest add-to-job-test\n  (let [sample-job {:catalog [{:onyx/name       :in\n                               :onyx/plugin     :onyx.plugin.core-async/input\n                               :onyx/type       :input}\n                              {:onyx/name       :inc\n                               :onyx/fn         :flat-workflow.core/my-inc}\n                              {:onyx/name       :out\n                               :onyx/plugin     :onyx.plugin.core-async/output}]\n                    :lifecycles [{:lifecycle/task :in\n                                  :lifecycle/calls :flat-workflow.core/in-calls}\n                                 {:lifecycle/task :in\n                                  :lifecycle/calls :onyx.plugin.core-async/reader-calls}\n                                 {:lifecycle/task :out\n                                  :lifecycle/calls :flat-workflow.core/out-calls}\n                                 {:lifecycle/task :out\n                                  :lifecycle/calls :onyx.plugin.core-async/writer-calls}]}]\n    (testing \&quot;that adding a new catalog entry increases the count\&quot;\n      (= (count (:catalog (add-to-job sample-job {:catalog {:onyx/name   :newtask\n                                                            :onyx/plugin :foo}})))\n         (inc (count (:catalog sample-job)))))))&quot; &quot;(deftest n-peers-test\n  (testing \&quot;\&quot;\n    (is (= (n-peers [{:onyx/name :in\n                      :onyx/min-peers 10}]\n                    [{:onyx/name :ident\n                      :onyx/min-peers 1}]\n                    [{:onyx/name :out\n                      :onyx/min-peers 2}]\n                    [[:in :out]])\n           12))))&quot; &quot;12&quot; &quot;(n-peers [{:onyx/name :in\n           :onyx/min-peers 10}]\n         [{:onyx/name :ident\n           :onyx/min-peers 1}]\n         [{:onyx/name :out\n           :onyx/min-peers 2}]\n         [[:in :out]]\n          12)&quot; &quot;(n-peers [{:onyx/name      :in\n           :onyx/min-peers 10}\n          {:onyx/name      :ident\n           :onyx/min-peers 1}\n          {:onyx/name      :out\n           :onyx/min-peers 2}]\n         [[:in :out]]\n         12)&quot; &quot;(n-peers [{:onyx/name      :in\n           :onyx/min-peers 10}\n          {:onyx/name      :ident\n           :onyx/min-peers 1}\n          {:onyx/name      :out\n           :onyx/min-peers 2}]\n         [[:in :out]]\n         )&quot; &quot;[:ident :out]&quot; &quot;:all&quot; &quot;(ns lib-onyx.plugins.core-async-test\n  (:require [lib-onyx.plugins.core-async :refer :all]))&quot; &quot;sample-job&quot; &quot;(add-core-async sample-job)&quot; &quot;(+ 1 1 1)&quot;], :remote []}}</component>
</project>